
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00007e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e74  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001b2  008001b2  00000fba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001010  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005edd  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d30  00000000  00000000  000071a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007218  00000000  00000000  00008ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  000100f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002159  00000000  00000000  00010870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003775  00000000  00000000  000129c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  0001613e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	c2 c4       	rjmp	.+2436   	; 0x79ae <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	92 c0       	rjmp	.+292    	; 0x716a <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e4 e7       	ldi	r30, 0x74	; 116
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a2 3b       	cpi	r26, 0xB2	; 178
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1
    70d0:	a2 eb       	ldi	r26, 0xB2	; 178
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ab 3c       	cpi	r26, 0xCB	; 203
    70da:	b2 07       	cpc	r27, r18
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	16 d3       	rcall	.+1580   	; 0x770c <main>
    70e0:	bd c6       	rjmp	.+3450   	; 0x7e5c <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    70ee:	85 ff       	sbrs	r24, 5
    70f0:	03 c0       	rjmp	.+6      	; 0x70f8 <FetchNextCommandByte+0x14>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    70f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    70f6:	0c c0       	rjmp	.+24     	; 0x7110 <FetchNextCommandByte+0x2c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    70fc:	8b 77       	andi	r24, 0x7B	; 123
    70fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7102:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsOUTReceived()))
    7106:	82 fd       	sbrc	r24, 2
    7108:	f0 cf       	rjmp	.-32     	; 0x70ea <FetchNextCommandByte+0x6>
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    710a:	8e b3       	in	r24, 0x1e	; 30
    710c:	81 11       	cpse	r24, r1
    710e:	f9 cf       	rjmp	.-14     	; 0x7102 <FetchNextCommandByte+0x1e>
}
    7110:	08 95       	ret

00007112 <WriteNextResponseByte>:
					UENUM = EndpointNumber;
    7112:	93 e0       	ldi	r25, 0x03	; 3
    7114:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7118:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    711c:	95 ff       	sbrs	r25, 5
    711e:	0a c0       	rjmp	.+20     	; 0x7134 <WriteNextResponseByte+0x22>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7120:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    7124:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7126:	84 e6       	ldi	r24, 0x64	; 100
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TxLEDPulse+0x1>
    712e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TxLEDPulse>
    7132:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7134:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7138:	9e 77       	andi	r25, 0x7E	; 126
    713a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    713e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    7142:	90 fd       	sbrc	r25, 0
    7144:	ed cf       	rjmp	.-38     	; 0x7120 <WriteNextResponseByte+0xe>
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7146:	9e b3       	in	r25, 0x1e	; 30
    7148:	91 11       	cpse	r25, r1
    714a:	f9 cf       	rjmp	.-14     	; 0x713e <WriteNextResponseByte+0x2c>
}
    714c:	08 95       	ret

0000714e <StartSketch>:
	cli();
    714e:	f8 94       	cli
	TIMSK1 = 0;
    7150:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = 0;
    7154:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	MCUCR = (1 << IVCE);
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    715c:	15 be       	out	0x35, r1	; 53
	L_LED_OFF();
    715e:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    7160:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    7162:	28 9a       	sbi	0x05, 0	; 5
	__asm__ volatile("jmp 0x0000");
    7164:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
    7168:	08 95       	ret

0000716a <__vector_17>:
{
    716a:	1f 92       	push	r1
    716c:	1f b6       	in	r1, 0x3f	; 63
    716e:	1f 92       	push	r1
    7170:	11 24       	eor	r1, r1
    7172:	2f 93       	push	r18
    7174:	8f 93       	push	r24
    7176:	9f 93       	push	r25
    7178:	ef 93       	push	r30
    717a:	ff 93       	push	r31
	TCNT1H = 0;
    717c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    7180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	if (TxLEDPulse && !(--TxLEDPulse))
    7184:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TxLEDPulse>
    7188:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <TxLEDPulse+0x1>
    718c:	00 97       	sbiw	r24, 0x00	; 0
    718e:	41 f0       	breq	.+16     	; 0x71a0 <__vector_17+0x36>
    7190:	01 97       	sbiw	r24, 0x01	; 1
    7192:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TxLEDPulse+0x1>
    7196:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TxLEDPulse>
    719a:	89 2b       	or	r24, r25
    719c:	09 f4       	brne	.+2      	; 0x71a0 <__vector_17+0x36>
		TX_LED_OFF();
    719e:	5d 9a       	sbi	0x0b, 5	; 11
	if (RxLEDPulse && !(--RxLEDPulse))
    71a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <RxLEDPulse>
    71a4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <RxLEDPulse+0x1>
    71a8:	00 97       	sbiw	r24, 0x00	; 0
    71aa:	41 f0       	breq	.+16     	; 0x71bc <__vector_17+0x52>
    71ac:	01 97       	sbiw	r24, 0x01	; 1
    71ae:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <RxLEDPulse+0x1>
    71b2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RxLEDPulse>
    71b6:	89 2b       	or	r24, r25
    71b8:	09 f4       	brne	.+2      	; 0x71bc <__vector_17+0x52>
		RX_LED_OFF();
    71ba:	28 9a       	sbi	0x05, 0	; 5
	resetTimeout++;
    71bc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
    71c0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <__data_end+0x1>
    71c4:	01 96       	adiw	r24, 0x01	; 1
    71c6:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__data_end+0x1>
    71ca:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end>
	if (pgm_read_word(0) != 0xFFFF)
    71ce:	f0 e0       	ldi	r31, 0x00	; 0
    71d0:	e0 e0       	ldi	r30, 0x00	; 0
    71d2:	85 91       	lpm	r24, Z+
    71d4:	94 91       	lpm	r25, Z
    71d6:	01 96       	adiw	r24, 0x01	; 1
    71d8:	49 f0       	breq	.+18     	; 0x71ec <__vector_17+0x82>
		Timeout++;
    71da:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <Timeout>
    71de:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <Timeout+0x1>
    71e2:	01 96       	adiw	r24, 0x01	; 1
    71e4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <Timeout+0x1>
    71e8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <Timeout>
}
    71ec:	ff 91       	pop	r31
    71ee:	ef 91       	pop	r30
    71f0:	9f 91       	pop	r25
    71f2:	8f 91       	pop	r24
    71f4:	2f 91       	pop	r18
    71f6:	1f 90       	pop	r1
    71f8:	1f be       	out	0x3f, r1	; 63
    71fa:	1f 90       	pop	r1
    71fc:	18 95       	reti

000071fe <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    71fe:	42 e0       	ldi	r20, 0x02	; 2
    7200:	61 ec       	ldi	r22, 0xC1	; 193
    7202:	82 e0       	ldi	r24, 0x02	; 2
    7204:	51 d3       	rcall	.+1698   	; 0x78a8 <Endpoint_ConfigureEndpoint_Prv>
    7206:	42 e1       	ldi	r20, 0x12	; 18
    7208:	61 e8       	ldi	r22, 0x81	; 129
    720a:	83 e0       	ldi	r24, 0x03	; 3
    720c:	4d d3       	rcall	.+1690   	; 0x78a8 <Endpoint_ConfigureEndpoint_Prv>
    720e:	42 e1       	ldi	r20, 0x12	; 18
    7210:	60 e8       	ldi	r22, 0x80	; 128
    7212:	84 e0       	ldi	r24, 0x04	; 4
    7214:	49 c3       	rjmp	.+1682   	; 0x78a8 <Endpoint_ConfigureEndpoint_Prv>

00007216 <EVENT_USB_Device_ControlRequest>:
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    7216:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_ControlRequest>
    721a:	98 2f       	mov	r25, r24
    721c:	9f 77       	andi	r25, 0x7F	; 127
    721e:	91 32       	cpi	r25, 0x21	; 33
    7220:	b9 f4       	brne	.+46     	; 0x7250 <EVENT_USB_Device_ControlRequest+0x3a>
	switch (USB_ControlRequest.bRequest)
    7222:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x1>
    7226:	90 32       	cpi	r25, 0x20	; 32
    7228:	a1 f0       	breq	.+40     	; 0x7252 <EVENT_USB_Device_ControlRequest+0x3c>
    722a:	91 32       	cpi	r25, 0x21	; 33
    722c:	89 f4       	brne	.+34     	; 0x7250 <EVENT_USB_Device_ControlRequest+0x3a>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    722e:	81 3a       	cpi	r24, 0xA1	; 161
    7230:	79 f4       	brne	.+30     	; 0x7250 <EVENT_USB_Device_ControlRequest+0x3a>
				UEINTX &= ~(1 << RXSTPI);
    7232:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7236:	87 7f       	andi	r24, 0xF7	; 247
    7238:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    723c:	67 e0       	ldi	r22, 0x07	; 7
    723e:	70 e0       	ldi	r23, 0x00	; 0
    7240:	82 e0       	ldi	r24, 0x02	; 2
    7242:	91 e0       	ldi	r25, 0x01	; 1
    7244:	62 d4       	rcall	.+2244   	; 0x7b0a <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7246:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    724a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    724c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    7250:	08 95       	ret
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7252:	81 32       	cpi	r24, 0x21	; 33
    7254:	e9 f7       	brne	.-6      	; 0x7250 <EVENT_USB_Device_ControlRequest+0x3a>
				UEINTX &= ~(1 << RXSTPI);
    7256:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    725a:	87 7f       	andi	r24, 0xF7	; 247
    725c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7260:	67 e0       	ldi	r22, 0x07	; 7
    7262:	70 e0       	ldi	r23, 0x00	; 0
    7264:	82 e0       	ldi	r24, 0x02	; 2
    7266:	91 e0       	ldi	r25, 0x01	; 1
    7268:	a4 d4       	rcall	.+2376   	; 0x7bb2 <Endpoint_Read_Control_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    726a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    726e:	8e 77       	andi	r24, 0x7E	; 126
    7270:	ed cf       	rjmp	.-38     	; 0x724c <EVENT_USB_Device_ControlRequest+0x36>

00007272 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7272:	4f 92       	push	r4
    7274:	5f 92       	push	r5
    7276:	6f 92       	push	r6
    7278:	7f 92       	push	r7
    727a:	8f 92       	push	r8
    727c:	9f 92       	push	r9
    727e:	af 92       	push	r10
    7280:	bf 92       	push	r11
    7282:	cf 92       	push	r12
    7284:	df 92       	push	r13
    7286:	ef 92       	push	r14
    7288:	ff 92       	push	r15
    728a:	0f 93       	push	r16
    728c:	1f 93       	push	r17
    728e:	cf 93       	push	r28
    7290:	df 93       	push	r29
					UENUM = EndpointNumber;
    7292:	84 e0       	ldi	r24, 0x04	; 4
    7294:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7298:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    729c:	82 ff       	sbrs	r24, 2
    729e:	25 c2       	rjmp	.+1098   	; 0x76ea <CDC_Task+0x478>
	  return;
	  
	RX_LED_ON();
    72a0:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    72a2:	84 e6       	ldi	r24, 0x64	; 100
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <RxLEDPulse+0x1>
    72aa:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RxLEDPulse>

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    72ae:	1a df       	rcall	.-460    	; 0x70e4 <FetchNextCommandByte>
    72b0:	c8 2f       	mov	r28, r24

	if (Command == 'E')
    72b2:	85 34       	cpi	r24, 0x45	; 69
    72b4:	51 f5       	brne	.+84     	; 0x730a <CDC_Task+0x98>
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    72b6:	8c ea       	ldi	r24, 0xAC	; 172
    72b8:	9d e0       	ldi	r25, 0x0D	; 13
    72ba:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <Timeout+0x1>
    72be:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <Timeout>
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    72c2:	07 b6       	in	r0, 0x37	; 55
    72c4:	00 fc       	sbrc	r0, 0
    72c6:	fd cf       	rjmp	.-6      	; 0x72c2 <CDC_Task+0x50>
    72c8:	f9 99       	sbic	0x1f, 1	; 31
    72ca:	fe cf       	rjmp	.-4      	; 0x72c8 <CDC_Task+0x56>
    72cc:	81 e1       	ldi	r24, 0x11	; 17
    72ce:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    72d2:	e8 95       	spm
	else if (Command == 'T')
	{
		FetchNextCommandByte();

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    72d4:	8d e0       	ldi	r24, 0x0D	; 13
    72d6:	1d df       	rcall	.-454    	; 0x7112 <WriteNextResponseByte>
					UENUM = EndpointNumber;
    72d8:	83 e0       	ldi	r24, 0x03	; 3
    72da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    72de:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72e6:	8e 77       	andi	r24, 0x7E	; 126
    72e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    72ec:	95 ff       	sbrs	r25, 5
    72ee:	f0 c1       	rjmp	.+992    	; 0x76d0 <CDC_Task+0x45e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    72f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    72f4:	80 ff       	sbrs	r24, 0
    72f6:	f6 c1       	rjmp	.+1004   	; 0x76e4 <CDC_Task+0x472>
					UENUM = EndpointNumber;
    72f8:	84 e0       	ldi	r24, 0x04	; 4
    72fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7302:	8b 77       	andi	r24, 0x7B	; 123
    7304:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    7308:	f0 c1       	rjmp	.+992    	; 0x76ea <CDC_Task+0x478>
	else if (Command == 'T')
    730a:	84 35       	cpi	r24, 0x54	; 84
		FetchNextCommandByte();
    730c:	11 f4       	brne	.+4      	; 0x7312 <CDC_Task+0xa0>
    730e:	ea de       	rcall	.-556    	; 0x70e4 <FetchNextCommandByte>
    7310:	e1 cf       	rjmp	.-62     	; 0x72d4 <CDC_Task+0x62>
	else if ((Command == 'L') || (Command == 'P'))
    7312:	8c 34       	cpi	r24, 0x4C	; 76
    7314:	f9 f2       	breq	.-66     	; 0x72d4 <CDC_Task+0x62>
    7316:	80 35       	cpi	r24, 0x50	; 80
    7318:	e9 f2       	breq	.-70     	; 0x72d4 <CDC_Task+0x62>
	else if (Command == 't')
    731a:	84 37       	cpi	r24, 0x74	; 116
		WriteNextResponseByte(0x44);
    731c:	21 f4       	brne	.+8      	; 0x7326 <CDC_Task+0xb4>
    731e:	84 e4       	ldi	r24, 0x44	; 68
    7320:	f8 de       	rcall	.-528    	; 0x7112 <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    7322:	80 e0       	ldi	r24, 0x00	; 0
    7324:	d8 cf       	rjmp	.-80     	; 0x72d6 <CDC_Task+0x64>
		WriteNextResponseByte('Y');
    7326:	89 e5       	ldi	r24, 0x59	; 89
	else if (Command == 'a')
    7328:	c1 36       	cpi	r28, 0x61	; 97
	else if (Command == 'A')
    732a:	a9 f2       	breq	.-86     	; 0x72d6 <CDC_Task+0x64>
		CurrAddress   = (FetchNextCommandByte() << 9);
    732c:	c1 34       	cpi	r28, 0x41	; 65
    732e:	d1 f4       	brne	.+52     	; 0x7364 <CDC_Task+0xf2>
    7330:	d9 de       	rcall	.-590    	; 0x70e4 <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7332:	c8 2f       	mov	r28, r24
    7334:	d7 de       	rcall	.-594    	; 0x70e4 <FetchNextCommandByte>
		CurrAddress   = (FetchNextCommandByte() << 9);
    7336:	2c 2f       	mov	r18, r28
    7338:	30 e0       	ldi	r19, 0x00	; 0
    733a:	32 2f       	mov	r19, r18
    733c:	22 27       	eor	r18, r18
    733e:	33 0f       	add	r19, r19
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7340:	90 e0       	ldi	r25, 0x00	; 0
    7342:	88 0f       	add	r24, r24
    7344:	99 1f       	adc	r25, r25
    7346:	82 2b       	or	r24, r18
    7348:	93 2b       	or	r25, r19
    734a:	09 2e       	mov	r0, r25
    734c:	00 0c       	add	r0, r0
    734e:	aa 0b       	sbc	r26, r26
    7350:	bb 0b       	sbc	r27, r27
		CurrAddress += 2;
    7352:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <CurrAddress>
    7356:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <CurrAddress+0x1>
    735a:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <CurrAddress+0x2>
    735e:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <CurrAddress+0x3>
		WriteNextResponseByte('\r');
    7362:	b8 cf       	rjmp	.-144    	; 0x72d4 <CDC_Task+0x62>
		WriteNextResponseByte('S');
    7364:	83 e5       	ldi	r24, 0x53	; 83
	else if (Command == 'p')
    7366:	c0 37       	cpi	r28, 0x70	; 112
    7368:	09 f4       	brne	.+2      	; 0x736c <CDC_Task+0xfa>
	else if (Command == 'S')
    736a:	b5 cf       	rjmp	.-150    	; 0x72d6 <CDC_Task+0x64>
    736c:	c3 35       	cpi	r28, 0x53	; 83
    736e:	49 f4       	brne	.+18     	; 0x7382 <CDC_Task+0x110>
    7370:	c9 ea       	ldi	r28, 0xA9	; 169
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    7372:	d1 e0       	ldi	r29, 0x01	; 1
    7374:	89 91       	ld	r24, Y+
    7376:	cd de       	rcall	.-614    	; 0x7112 <WriteNextResponseByte>
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7378:	21 e0       	ldi	r18, 0x01	; 1
    737a:	c0 3b       	cpi	r28, 0xB0	; 176
    737c:	d2 07       	cpc	r29, r18
    737e:	d1 f7       	brne	.-12     	; 0x7374 <CDC_Task+0x102>
	else if (Command == 'V')
    7380:	ab cf       	rjmp	.-170    	; 0x72d8 <CDC_Task+0x66>
    7382:	c6 35       	cpi	r28, 0x56	; 86
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7384:	21 f4       	brne	.+8      	; 0x738e <CDC_Task+0x11c>
    7386:	81 e3       	ldi	r24, 0x31	; 49
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    7388:	c4 de       	rcall	.-632    	; 0x7112 <WriteNextResponseByte>
    738a:	80 e3       	ldi	r24, 0x30	; 48
	else if (Command == 's')
    738c:	a4 cf       	rjmp	.-184    	; 0x72d6 <CDC_Task+0x64>
    738e:	c3 37       	cpi	r28, 0x73	; 115
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7390:	31 f4       	brne	.+12     	; 0x739e <CDC_Task+0x12c>
    7392:	87 e8       	ldi	r24, 0x87	; 135
    7394:	be de       	rcall	.-644    	; 0x7112 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
    7396:	85 e9       	ldi	r24, 0x95	; 149
    7398:	bc de       	rcall	.-648    	; 0x7112 <WriteNextResponseByte>
    739a:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte(AVR_SIGNATURE_1);
    739c:	9c cf       	rjmp	.-200    	; 0x72d6 <CDC_Task+0x64>
    739e:	c5 36       	cpi	r28, 0x65	; 101
	else if (Command == 'e')
    73a0:	b9 f4       	brne	.+46     	; 0x73d0 <CDC_Task+0x15e>
    73a2:	f0 e0       	ldi	r31, 0x00	; 0
    73a4:	e0 e0       	ldi	r30, 0x00	; 0
    73a6:	83 e0       	ldi	r24, 0x03	; 3
			boot_page_erase(CurrFlashAddress);
    73a8:	95 e0       	ldi	r25, 0x05	; 5
			boot_page_write(CurrFlashAddress);
    73aa:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
			boot_page_erase(CurrFlashAddress);
    73ae:	e8 95       	spm
    73b0:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    73b2:	00 fc       	sbrc	r0, 0
    73b4:	fd cf       	rjmp	.-6      	; 0x73b0 <CDC_Task+0x13e>
    73b6:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
			boot_page_write(CurrFlashAddress);
    73ba:	e8 95       	spm
    73bc:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    73be:	00 fc       	sbrc	r0, 0
    73c0:	fd cf       	rjmp	.-6      	; 0x73bc <CDC_Task+0x14a>
    73c2:	e0 58       	subi	r30, 0x80	; 128
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    73c4:	ff 4f       	sbci	r31, 0xFF	; 255
    73c6:	e1 15       	cp	r30, r1
    73c8:	20 e7       	ldi	r18, 0x70	; 112
    73ca:	f2 07       	cpc	r31, r18
    73cc:	71 f7       	brne	.-36     	; 0x73aa <CDC_Task+0x138>
    73ce:	82 cf       	rjmp	.-252    	; 0x72d4 <CDC_Task+0x62>
    73d0:	89 e0       	ldi	r24, 0x09	; 9
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    73d2:	e1 e0       	ldi	r30, 0x01	; 1
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	c2 37       	cpi	r28, 0x72	; 114
	else if (Command == 'r')
    73d8:	79 f0       	breq	.+30     	; 0x73f8 <CDC_Task+0x186>
    73da:	89 e0       	ldi	r24, 0x09	; 9
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    73dc:	f0 e0       	ldi	r31, 0x00	; 0
    73de:	e0 e0       	ldi	r30, 0x00	; 0
    73e0:	c6 34       	cpi	r28, 0x46	; 70
	else if (Command == 'F')
    73e2:	51 f0       	breq	.+20     	; 0x73f8 <CDC_Task+0x186>
    73e4:	89 e0       	ldi	r24, 0x09	; 9
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    73e6:	e3 e0       	ldi	r30, 0x03	; 3
    73e8:	f0 e0       	ldi	r31, 0x00	; 0
    73ea:	ce 34       	cpi	r28, 0x4E	; 78
	else if (Command == 'N')
    73ec:	29 f0       	breq	.+10     	; 0x73f8 <CDC_Task+0x186>
    73ee:	c1 35       	cpi	r28, 0x51	; 81
	else if (Command == 'Q')
    73f0:	39 f4       	brne	.+14     	; 0x7400 <CDC_Task+0x18e>
    73f2:	89 e0       	ldi	r24, 0x09	; 9
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    73f4:	e2 e0       	ldi	r30, 0x02	; 2
    73f6:	f0 e0       	ldi	r31, 0x00	; 0
    73f8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    73fc:	84 91       	lpm	r24, Z
	else if (Command == 'b')
    73fe:	6b cf       	rjmp	.-298    	; 0x72d6 <CDC_Task+0x64>
    7400:	c2 36       	cpi	r28, 0x62	; 98
		WriteNextResponseByte('Y');
    7402:	31 f4       	brne	.+12     	; 0x7410 <CDC_Task+0x19e>
    7404:	89 e5       	ldi	r24, 0x59	; 89
    7406:	85 de       	rcall	.-758    	; 0x7112 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    7408:	80 e0       	ldi	r24, 0x00	; 0
    740a:	83 de       	rcall	.-762    	; 0x7112 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    740c:	80 e8       	ldi	r24, 0x80	; 128
	else if ((Command == 'B') || (Command == 'g'))
    740e:	63 cf       	rjmp	.-314    	; 0x72d6 <CDC_Task+0x64>
    7410:	c2 34       	cpi	r28, 0x42	; 66
    7412:	19 f0       	breq	.+6      	; 0x741a <CDC_Task+0x1a8>
    7414:	c7 36       	cpi	r28, 0x67	; 103
		Timeout = 0;
    7416:	09 f0       	breq	.+2      	; 0x741a <CDC_Task+0x1a8>
    7418:	cb c0       	rjmp	.+406    	; 0x75b0 <CDC_Task+0x33e>
    741a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Timeout+0x1>
	BlockSize  = (FetchNextCommandByte() << 8);
    741e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <Timeout>
    7422:	60 de       	rcall	.-832    	; 0x70e4 <FetchNextCommandByte>
	BlockSize |=  FetchNextCommandByte();
    7424:	18 2f       	mov	r17, r24
    7426:	5e de       	rcall	.-836    	; 0x70e4 <FetchNextCommandByte>
    7428:	08 2f       	mov	r16, r24
	MemoryType =  FetchNextCommandByte();
    742a:	5c de       	rcall	.-840    	; 0x70e4 <FetchNextCommandByte>
    742c:	d8 2f       	mov	r29, r24
    742e:	8b eb       	ldi	r24, 0xBB	; 187
	if ((MemoryType != 'E') && (MemoryType != 'F'))
    7430:	8d 0f       	add	r24, r29
    7432:	82 30       	cpi	r24, 0x02	; 2
    7434:	10 f0       	brcs	.+4      	; 0x743a <CDC_Task+0x1c8>
    7436:	8f e3       	ldi	r24, 0x3F	; 63
		WriteNextResponseByte('?');
    7438:	4e cf       	rjmp	.-356    	; 0x72d6 <CDC_Task+0x64>
    743a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TIMSK1 = 0;
    743e:	c7 36       	cpi	r28, 0x67	; 103
	if (Command == 'g')
    7440:	09 f0       	breq	.+2      	; 0x7444 <CDC_Task+0x1d2>
    7442:	45 c0       	rjmp	.+138    	; 0x74ce <CDC_Task+0x25c>
    7444:	81 e1       	ldi	r24, 0x11	; 17
		boot_rww_enable();
    7446:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    744a:	e8 95       	spm
    744c:	c0 e0       	ldi	r28, 0x00	; 0
	bool     HighByte = false;
    744e:	bb 24       	eor	r11, r11
				HighByte = !HighByte;
    7450:	b3 94       	inc	r11
    7452:	01 50       	subi	r16, 0x01	; 1
		while (BlockSize--)
    7454:	11 09       	sbc	r17, r1
    7456:	20 f4       	brcc	.+8      	; 0x7460 <CDC_Task+0x1ee>
    7458:	82 e0       	ldi	r24, 0x02	; 2
	TIMSK1 = (1 << OCIE1A);
    745a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    745e:	3c cf       	rjmp	.-392    	; 0x72d8 <CDC_Task+0x66>
    7460:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <CurrAddress>
			if (MemoryType == 'F')
    7464:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7468:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    746c:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <CurrAddress+0x3>
    7470:	d6 34       	cpi	r29, 0x46	; 70
    7472:	b9 f4       	brne	.+46     	; 0x74a2 <CDC_Task+0x230>
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7474:	ec 2f       	mov	r30, r28
    7476:	f0 e0       	ldi	r31, 0x00	; 0
    7478:	ec 29       	or	r30, r12
    747a:	fd 29       	or	r31, r13
    747c:	84 91       	lpm	r24, Z
    747e:	49 de       	rcall	.-878    	; 0x7112 <WriteNextResponseByte>
    7480:	cc 23       	and	r28, r28
				if (HighByte)
    7482:	69 f0       	breq	.+26     	; 0x749e <CDC_Task+0x22c>
    7484:	82 e0       	ldi	r24, 0x02	; 2
				  CurrAddress += 2;
    7486:	c8 0e       	add	r12, r24
    7488:	d1 1c       	adc	r13, r1
    748a:	e1 1c       	adc	r14, r1
    748c:	f1 1c       	adc	r15, r1
    748e:	c0 92 bb 01 	sts	0x01BB, r12	; 0x8001bb <CurrAddress>
    7492:	d0 92 bc 01 	sts	0x01BC, r13	; 0x8001bc <CurrAddress+0x1>
    7496:	e0 92 bd 01 	sts	0x01BD, r14	; 0x8001bd <CurrAddress+0x2>
    749a:	f0 92 be 01 	sts	0x01BE, r15	; 0x8001be <CurrAddress+0x3>
				HighByte = !HighByte;
    749e:	cb 25       	eor	r28, r11
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    74a0:	d8 cf       	rjmp	.-80     	; 0x7452 <CDC_Task+0x1e0>
    74a2:	d7 01       	movw	r26, r14
    74a4:	c6 01       	movw	r24, r12
    74a6:	b6 95       	lsr	r27
    74a8:	a7 95       	ror	r26
    74aa:	97 95       	ror	r25
    74ac:	87 95       	ror	r24
    74ae:	c0 d4       	rcall	.+2432   	; 0x7e30 <eeprom_read_byte>
    74b0:	30 de       	rcall	.-928    	; 0x7112 <WriteNextResponseByte>
    74b2:	e2 e0       	ldi	r30, 0x02	; 2
				CurrAddress += 2;
    74b4:	ce 0e       	add	r12, r30
    74b6:	d1 1c       	adc	r13, r1
    74b8:	e1 1c       	adc	r14, r1
    74ba:	f1 1c       	adc	r15, r1
    74bc:	c0 92 bb 01 	sts	0x01BB, r12	; 0x8001bb <CurrAddress>
    74c0:	d0 92 bc 01 	sts	0x01BC, r13	; 0x8001bc <CurrAddress+0x1>
    74c4:	e0 92 bd 01 	sts	0x01BD, r14	; 0x8001bd <CurrAddress+0x2>
    74c8:	f0 92 be 01 	sts	0x01BE, r15	; 0x8001be <CurrAddress+0x3>
    74cc:	c2 cf       	rjmp	.-124    	; 0x7452 <CDC_Task+0x1e0>
    74ce:	40 90 bb 01 	lds	r4, 0x01BB	; 0x8001bb <CurrAddress>
		uint32_t PageStartAddress = CurrAddress;
    74d2:	50 90 bc 01 	lds	r5, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    74d6:	60 90 bd 01 	lds	r6, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    74da:	70 90 be 01 	lds	r7, 0x01BE	; 0x8001be <CurrAddress+0x3>
    74de:	d6 34       	cpi	r29, 0x46	; 70
		if (MemoryType == 'F')
    74e0:	41 f4       	brne	.+16     	; 0x74f2 <CDC_Task+0x280>
    74e2:	83 e0       	ldi	r24, 0x03	; 3
			boot_page_erase(PageStartAddress);
    74e4:	f2 01       	movw	r30, r4
    74e6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    74ea:	e8 95       	spm
    74ec:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    74ee:	00 fc       	sbrc	r0, 0
    74f0:	fd cf       	rjmp	.-6      	; 0x74ec <CDC_Task+0x27a>
    74f2:	c0 e0       	ldi	r28, 0x00	; 0
    74f4:	f1 2c       	mov	r15, r1
				HighByte = !HighByte;
    74f6:	ee 24       	eor	r14, r14
    74f8:	e3 94       	inc	r14
    74fa:	24 c0       	rjmp	.+72     	; 0x7544 <CDC_Task+0x2d2>
			if (MemoryType == 'F')
    74fc:	d6 34       	cpi	r29, 0x46	; 70
    74fe:	09 f0       	breq	.+2      	; 0x7502 <CDC_Task+0x290>
    7500:	34 c0       	rjmp	.+104    	; 0x756a <CDC_Task+0x2f8>
				if (HighByte)
    7502:	ff 20       	and	r15, r15
    7504:	79 f1       	breq	.+94     	; 0x7564 <CDC_Task+0x2f2>
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7506:	80 90 bb 01 	lds	r8, 0x01BB	; 0x8001bb <CurrAddress>
    750a:	90 90 bc 01 	lds	r9, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    750e:	a0 90 bd 01 	lds	r10, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    7512:	b0 90 be 01 	lds	r11, 0x01BE	; 0x8001be <CurrAddress+0x3>
    7516:	e6 dd       	rcall	.-1076   	; 0x70e4 <FetchNextCommandByte>
    7518:	98 2f       	mov	r25, r24
    751a:	8c 2f       	mov	r24, r28
    751c:	f4 01       	movw	r30, r8
    751e:	0c 01       	movw	r0, r24
    7520:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7524:	e8 95       	spm
    7526:	11 24       	eor	r1, r1
    7528:	f2 e0       	ldi	r31, 0x02	; 2
					CurrAddress += 2;
    752a:	8f 0e       	add	r8, r31
    752c:	91 1c       	adc	r9, r1
    752e:	a1 1c       	adc	r10, r1
    7530:	b1 1c       	adc	r11, r1
    7532:	80 92 bb 01 	sts	0x01BB, r8	; 0x8001bb <CurrAddress>
    7536:	90 92 bc 01 	sts	0x01BC, r9	; 0x8001bc <CurrAddress+0x1>
    753a:	a0 92 bd 01 	sts	0x01BD, r10	; 0x8001bd <CurrAddress+0x2>
    753e:	b0 92 be 01 	sts	0x01BE, r11	; 0x8001be <CurrAddress+0x3>
		while (BlockSize--)
    7542:	fe 24       	eor	r15, r14
    7544:	01 50       	subi	r16, 0x01	; 1
		if (MemoryType == 'F')
    7546:	11 09       	sbc	r17, r1
    7548:	c8 f6       	brcc	.-78     	; 0x74fc <CDC_Task+0x28a>
			boot_page_write(PageStartAddress);
    754a:	d6 34       	cpi	r29, 0x46	; 70
    754c:	41 f4       	brne	.+16     	; 0x755e <CDC_Task+0x2ec>
    754e:	85 e0       	ldi	r24, 0x05	; 5
    7550:	f2 01       	movw	r30, r4
    7552:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
			boot_spm_busy_wait();
    7556:	e8 95       	spm
    7558:	07 b6       	in	r0, 0x37	; 55
		WriteNextResponseByte('\r');
    755a:	00 fc       	sbrc	r0, 0
    755c:	fd cf       	rjmp	.-6      	; 0x7558 <CDC_Task+0x2e6>
    755e:	8d e0       	ldi	r24, 0x0D	; 13
					LowByte = FetchNextCommandByte();
    7560:	d8 dd       	rcall	.-1104   	; 0x7112 <WriteNextResponseByte>
    7562:	7a cf       	rjmp	.-268    	; 0x7458 <CDC_Task+0x1e6>
    7564:	bf dd       	rcall	.-1154   	; 0x70e4 <FetchNextCommandByte>
    7566:	c8 2f       	mov	r28, r24
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7568:	ec cf       	rjmp	.-40     	; 0x7542 <CDC_Task+0x2d0>
    756a:	bc dd       	rcall	.-1160   	; 0x70e4 <FetchNextCommandByte>
    756c:	68 2f       	mov	r22, r24
    756e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <CurrAddress>
    7572:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7576:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    757a:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <CurrAddress+0x3>
    757e:	b6 95       	lsr	r27
    7580:	a7 95       	ror	r26
    7582:	97 95       	ror	r25
    7584:	87 95       	ror	r24
    7586:	5c d4       	rcall	.+2232   	; 0x7e40 <eeprom_write_byte>
    7588:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <CurrAddress>
				CurrAddress += 2;
    758c:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7590:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    7594:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <CurrAddress+0x3>
    7598:	02 96       	adiw	r24, 0x02	; 2
    759a:	a1 1d       	adc	r26, r1
    759c:	b1 1d       	adc	r27, r1
    759e:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <CurrAddress>
    75a2:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <CurrAddress+0x1>
    75a6:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <CurrAddress+0x2>
    75aa:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <CurrAddress+0x3>
    75ae:	ca cf       	rjmp	.-108    	; 0x7544 <CDC_Task+0x2d2>
	else if (Command == 'C')
    75b0:	c3 34       	cpi	r28, 0x43	; 67
    75b2:	71 f4       	brne	.+28     	; 0x75d0 <CDC_Task+0x35e>
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    75b4:	c0 91 bb 01 	lds	r28, 0x01BB	; 0x8001bb <CurrAddress>
    75b8:	d0 91 bc 01 	lds	r29, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    75bc:	93 dd       	rcall	.-1242   	; 0x70e4 <FetchNextCommandByte>
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	21 e0       	ldi	r18, 0x01	; 1
    75c2:	fe 01       	movw	r30, r28
    75c4:	0c 01       	movw	r0, r24
    75c6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75ca:	e8 95       	spm
    75cc:	11 24       	eor	r1, r1
		WriteNextResponseByte('\r');
    75ce:	82 ce       	rjmp	.-764    	; 0x72d4 <CDC_Task+0x62>
	else if (Command == 'c')
    75d0:	c3 36       	cpi	r28, 0x63	; 99
    75d2:	01 f5       	brne	.+64     	; 0x7614 <CDC_Task+0x3a2>
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    75d4:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <CurrAddress>
    75d8:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    75dc:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    75e0:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <CurrAddress+0x3>
    75e4:	7f dd       	rcall	.-1282   	; 0x70e4 <FetchNextCommandByte>
    75e6:	f6 01       	movw	r30, r12
    75e8:	e1 60       	ori	r30, 0x01	; 1
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	21 e0       	ldi	r18, 0x01	; 1
    75ee:	0c 01       	movw	r0, r24
    75f0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75f4:	e8 95       	spm
    75f6:	11 24       	eor	r1, r1
    75f8:	f2 e0       	ldi	r31, 0x02	; 2
		CurrAddress += 2;
    75fa:	cf 0e       	add	r12, r31
    75fc:	d1 1c       	adc	r13, r1
    75fe:	e1 1c       	adc	r14, r1
    7600:	f1 1c       	adc	r15, r1
    7602:	c0 92 bb 01 	sts	0x01BB, r12	; 0x8001bb <CurrAddress>
    7606:	d0 92 bc 01 	sts	0x01BC, r13	; 0x8001bc <CurrAddress+0x1>
    760a:	e0 92 bd 01 	sts	0x01BD, r14	; 0x8001bd <CurrAddress+0x2>
    760e:	f0 92 be 01 	sts	0x01BE, r15	; 0x8001be <CurrAddress+0x3>
		WriteNextResponseByte('\r');
    7612:	60 ce       	rjmp	.-832    	; 0x72d4 <CDC_Task+0x62>
	else if (Command == 'm')
    7614:	cd 36       	cpi	r28, 0x6D	; 109
    7616:	61 f4       	brne	.+24     	; 0x7630 <CDC_Task+0x3be>
		boot_page_write(CurrAddress);
    7618:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <CurrAddress>
    761c:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7620:	85 e0       	ldi	r24, 0x05	; 5
    7622:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
		boot_spm_busy_wait();
    7626:	e8 95       	spm
    7628:	07 b6       	in	r0, 0x37	; 55
    762a:	00 fc       	sbrc	r0, 0
    762c:	fd cf       	rjmp	.-6      	; 0x7628 <CDC_Task+0x3b6>
	else if (Command == 'R')
    762e:	52 ce       	rjmp	.-860    	; 0x72d4 <CDC_Task+0x62>
    7630:	c2 35       	cpi	r28, 0x52	; 82
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    7632:	51 f4       	brne	.+20     	; 0x7648 <CDC_Task+0x3d6>
    7634:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <CurrAddress>
    7638:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <CurrAddress+0x1>
		WriteNextResponseByte(ProgramWord >> 8);
    763c:	c5 91       	lpm	r28, Z+
    763e:	d4 91       	lpm	r29, Z
    7640:	8d 2f       	mov	r24, r29
		WriteNextResponseByte(ProgramWord & 0xFF);
    7642:	67 dd       	rcall	.-1330   	; 0x7112 <WriteNextResponseByte>
    7644:	8c 2f       	mov	r24, r28
	else if (Command == 'D')
    7646:	47 ce       	rjmp	.-882    	; 0x72d6 <CDC_Task+0x64>
    7648:	c4 34       	cpi	r28, 0x44	; 68
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    764a:	d9 f4       	brne	.+54     	; 0x7682 <CDC_Task+0x410>
    764c:	4b dd       	rcall	.-1386   	; 0x70e4 <FetchNextCommandByte>
    764e:	68 2f       	mov	r22, r24
    7650:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <CurrAddress>
    7654:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7658:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    765c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <CurrAddress+0x3>
    7660:	b6 95       	lsr	r27
    7662:	a7 95       	ror	r26
    7664:	97 95       	ror	r25
    7666:	87 95       	ror	r24
    7668:	eb d3       	rcall	.+2006   	; 0x7e40 <eeprom_write_byte>
    766a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <CurrAddress>
		CurrAddress += 2;
    766e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    7672:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    7676:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <CurrAddress+0x3>
    767a:	02 96       	adiw	r24, 0x02	; 2
    767c:	a1 1d       	adc	r26, r1
    767e:	b1 1d       	adc	r27, r1
	else if (Command == 'd')
    7680:	68 ce       	rjmp	.-816    	; 0x7352 <CDC_Task+0xe0>
    7682:	c4 36       	cpi	r28, 0x64	; 100
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7684:	f1 f4       	brne	.+60     	; 0x76c2 <CDC_Task+0x450>
    7686:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <CurrAddress>
    768a:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <CurrAddress+0x1>
    768e:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <CurrAddress+0x2>
    7692:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <CurrAddress+0x3>
    7696:	d7 01       	movw	r26, r14
    7698:	c6 01       	movw	r24, r12
    769a:	b6 95       	lsr	r27
    769c:	a7 95       	ror	r26
    769e:	97 95       	ror	r25
    76a0:	87 95       	ror	r24
    76a2:	c6 d3       	rcall	.+1932   	; 0x7e30 <eeprom_read_byte>
    76a4:	36 dd       	rcall	.-1428   	; 0x7112 <WriteNextResponseByte>
    76a6:	22 e0       	ldi	r18, 0x02	; 2
		CurrAddress += 2;
    76a8:	c2 0e       	add	r12, r18
    76aa:	d1 1c       	adc	r13, r1
    76ac:	e1 1c       	adc	r14, r1
    76ae:	f1 1c       	adc	r15, r1
    76b0:	c0 92 bb 01 	sts	0x01BB, r12	; 0x8001bb <CurrAddress>
    76b4:	d0 92 bc 01 	sts	0x01BC, r13	; 0x8001bc <CurrAddress+0x1>
    76b8:	e0 92 bd 01 	sts	0x01BD, r14	; 0x8001bd <CurrAddress+0x2>
    76bc:	f0 92 be 01 	sts	0x01BE, r15	; 0x8001be <CurrAddress+0x3>
    76c0:	0b ce       	rjmp	.-1002   	; 0x72d8 <CDC_Task+0x66>
    76c2:	cb 31       	cpi	r28, 0x1B	; 27
	else if (Command != 27)
    76c4:	09 f4       	brne	.+2      	; 0x76c8 <CDC_Task+0x456>
    76c6:	08 ce       	rjmp	.-1008   	; 0x72d8 <CDC_Task+0x66>
    76c8:	b6 ce       	rjmp	.-660    	; 0x7436 <CDC_Task+0x1c4>
    76ca:	8e b3       	in	r24, 0x1e	; 30
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    76cc:	88 23       	and	r24, r24
    76ce:	69 f0       	breq	.+26     	; 0x76ea <CDC_Task+0x478>
    76d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76d4:	80 ff       	sbrs	r24, 0
		while (!(Endpoint_IsINReady()))
    76d6:	f9 cf       	rjmp	.-14     	; 0x76ca <CDC_Task+0x458>
    76d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76dc:	8e 77       	andi	r24, 0x7E	; 126
    76de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    76e2:	06 ce       	rjmp	.-1012   	; 0x72f0 <CDC_Task+0x7e>
			}
    76e4:	8e b3       	in	r24, 0x1e	; 30
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    76e6:	81 11       	cpse	r24, r1
    76e8:	03 ce       	rjmp	.-1018   	; 0x72f0 <CDC_Task+0x7e>
    76ea:	df 91       	pop	r29
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    76ec:	cf 91       	pop	r28
    76ee:	1f 91       	pop	r17
    76f0:	0f 91       	pop	r16
    76f2:	ff 90       	pop	r15
    76f4:	ef 90       	pop	r14
    76f6:	df 90       	pop	r13
    76f8:	cf 90       	pop	r12
    76fa:	bf 90       	pop	r11
    76fc:	af 90       	pop	r10
    76fe:	9f 90       	pop	r9
    7700:	8f 90       	pop	r8
    7702:	7f 90       	pop	r7
    7704:	6f 90       	pop	r6
    7706:	5f 90       	pop	r5
    7708:	4f 90       	pop	r4
    770a:	08 95       	ret

0000770c <main>:
    770c:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__bss_end+0x635>
	*bootKeyPtr = 0;
    7710:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x635>
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    7714:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;							// clear all reset flags	
    7716:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7718:	0f b6       	in	r0, 0x3f	; 63
    771a:	f8 94       	cli
    771c:	a8 95       	wdr
    771e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7722:	28 61       	ori	r18, 0x18	; 24
    7724:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7728:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    772c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    772e:	40 e8       	ldi	r20, 0x80	; 128
    7730:	20 e0       	ldi	r18, 0x00	; 0
    7732:	0f b6       	in	r0, 0x3f	; 63
    7734:	f8 94       	cli
    7736:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    773a:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    773e:	0f be       	out	0x3f, r0	; 63
	MCUCR = (1 << IVCE);
    7740:	21 e0       	ldi	r18, 0x01	; 1
    7742:	25 bf       	out	0x35, r18	; 53
	MCUCR = (1 << IVSEL);
    7744:	32 e0       	ldi	r19, 0x02	; 2
    7746:	35 bf       	out	0x35, r19	; 53
	LED_SETUP();
    7748:	3f 9a       	sbi	0x07, 7	; 7
    774a:	20 9a       	sbi	0x04, 0	; 4
    774c:	55 9a       	sbi	0x0a, 5	; 10
	CPU_PRESCALE(0); 
    774e:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    7752:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	L_LED_OFF();
    7756:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    7758:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    775a:	28 9a       	sbi	0x05, 0	; 5
	OCR1AH = 0;
    775c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 250;
    7760:	4a ef       	ldi	r20, 0xFA	; 250
    7762:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    7766:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    776a:	33 e0       	ldi	r19, 0x03	; 3
    776c:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	if (pgm_read_word(0) != 0xFFFF) sketchPresent = true;
    7770:	f0 e0       	ldi	r31, 0x00	; 0
    7772:	e0 e0       	ldi	r30, 0x00	; 0
    7774:	45 91       	lpm	r20, Z+
    7776:	54 91       	lpm	r21, Z
    7778:	4f 3f       	cpi	r20, 0xFF	; 255
    777a:	5f 4f       	sbci	r21, 0xFF	; 255
    777c:	11 f0       	breq	.+4      	; 0x7782 <main+0x76>
    777e:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <sketchPresent>
	if ( (mcusr_state & (1<<EXTRF)) && (bootKeyPtrVal != bootKey) ) {
    7782:	81 ff       	sbrs	r24, 1
    7784:	32 c0       	rjmp	.+100    	; 0x77ea <main+0xde>
    7786:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <bootKey>
    778a:	29 17       	cp	r18, r25
    778c:	71 f1       	breq	.+92     	; 0x77ea <main+0xde>
		*bootKeyPtr = bootKey;
    778e:	20 93 00 08 	sts	0x0800, r18	; 0x800800 <__bss_end+0x635>
		sei();
    7792:	78 94       	sei
		while (RunBootloader) 
    7794:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
    7798:	88 23       	and	r24, r24
    779a:	39 f0       	breq	.+14     	; 0x77aa <main+0x9e>
			if (resetTimeout > EXT_RESET_TIMEOUT_PERIOD)
    779c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <__data_end>
    77a0:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <__data_end+0x1>
    77a4:	28 37       	cpi	r18, 0x78	; 120
    77a6:	31 40       	sbci	r19, 0x01	; 1
    77a8:	b8 f3       	brcs	.-18     	; 0x7798 <main+0x8c>
    77aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
		cli();
    77ae:	f8 94       	cli
		*bootKeyPtr = 0;
    77b0:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x635>
		RunBootloader = true;
    77b4:	81 e0       	ldi	r24, 0x01	; 1
    77b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <RunBootloader>
		if (sketchPresent) StartSketch();
    77ba:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <sketchPresent>
    77be:	81 11       	cpse	r24, r1
    77c0:	c6 dc       	rcall	.-1652   	; 0x714e <StartSketch>
	USB_Init();
    77c2:	dd d0       	rcall	.+442    	; 0x797e <USB_Init>
    77c4:	78 94       	sei
	sei();
    77c6:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Timeout+0x1>
	Timeout = 0;
    77ca:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <Timeout>
    77ce:	ce ef       	ldi	r28, 0xFE	; 254
			p = 254-p;
    77d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
	while (RunBootloader)
    77d4:	81 11       	cpse	r24, r1
    77d6:	16 c0       	rjmp	.+44     	; 0x7804 <main+0xf8>
    77d8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    77dc:	81 60       	ori	r24, 0x01	; 1
    77de:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	StartSketch();
    77e2:	b5 dc       	rcall	.-1686   	; 0x714e <StartSketch>
    77e4:	90 e0       	ldi	r25, 0x00	; 0
}
    77e6:	80 e0       	ldi	r24, 0x00	; 0
    77e8:	08 95       	ret
    77ea:	80 ff       	sbrs	r24, 0
	else if ( (mcusr_state & (1<<PORF)) && sketchPresent) {	
    77ec:	04 c0       	rjmp	.+8      	; 0x77f6 <main+0xea>
    77ee:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <sketchPresent>
    77f2:	21 11       	cpse	r18, r1
    77f4:	e5 cf       	rjmp	.-54     	; 0x77c0 <main+0xb4>
    77f6:	83 ff       	sbrs	r24, 3
	else if ( (mcusr_state & (1<<WDRF) ) && (bootKeyPtrVal != bootKey) && sketchPresent) {	
    77f8:	e4 cf       	rjmp	.-56     	; 0x77c2 <main+0xb6>
    77fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <bootKey>
    77fe:	89 13       	cpse	r24, r25
    7800:	dc cf       	rjmp	.-72     	; 0x77ba <main+0xae>
		CDC_Task();
    7802:	df cf       	rjmp	.-66     	; 0x77c2 <main+0xb6>
    7804:	36 dd       	rcall	.-1428   	; 0x7272 <CDC_Task>
		USB_USBTask();
    7806:	fd d2       	rcall	.+1530   	; 0x7e02 <USB_USBTask>
    7808:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <Timeout>
		if (Timeout > TIMEOUT_PERIOD)
    780c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <Timeout+0x1>
    7810:	81 3a       	cpi	r24, 0xA1	; 161
    7812:	9f 40       	sbci	r25, 0x0F	; 15
    7814:	10 f0       	brcs	.+4      	; 0x781a <main+0x10e>
    7816:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
			RunBootloader = false;
    781a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <LLEDPulse>
		LLEDPulse++;
    781e:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <LLEDPulse+0x1>
    7822:	01 96       	adiw	r24, 0x01	; 1
    7824:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <LLEDPulse+0x1>
    7828:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <LLEDPulse>
    782c:	29 2f       	mov	r18, r25
		uint8_t p = LLEDPulse >> 8;
    782e:	97 ff       	sbrs	r25, 7
		if (p > 127)
    7830:	02 c0       	rjmp	.+4      	; 0x7836 <main+0x12a>
    7832:	2c 2f       	mov	r18, r28
			p = 254-p;
    7834:	29 1b       	sub	r18, r25
    7836:	22 0f       	add	r18, r18
		p += p;
    7838:	28 17       	cp	r18, r24
		if (((uint8_t)LLEDPulse) > p)
    783a:	10 f4       	brcc	.+4      	; 0x7840 <main+0x134>
    783c:	47 98       	cbi	0x08, 7	; 8
			L_LED_OFF();
    783e:	c8 cf       	rjmp	.-112    	; 0x77d0 <main+0xc4>
    7840:	47 9a       	sbi	0x08, 7	; 8
			L_LED_ON();
    7842:	c6 cf       	rjmp	.-116    	; 0x77d0 <main+0xc4>

00007844 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    7844:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
    7846:	29 2f       	mov	r18, r25
    7848:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    784a:	22 30       	cpi	r18, 0x02	; 2
    784c:	31 05       	cpc	r19, r1
    784e:	c1 f0       	breq	.+48     	; 0x7880 <CALLBACK_USB_GetDescriptor+0x3c>
    7850:	23 30       	cpi	r18, 0x03	; 3
    7852:	31 05       	cpc	r19, r1
    7854:	51 f0       	breq	.+20     	; 0x786a <CALLBACK_USB_GetDescriptor+0x26>
    7856:	21 30       	cpi	r18, 0x01	; 1
    7858:	31 05       	cpc	r19, r1
    785a:	09 f5       	brne	.+66     	; 0x789e <CALLBACK_USB_GetDescriptor+0x5a>
    785c:	82 e1       	ldi	r24, 0x12	; 18
    785e:	90 e0       	ldi	r25, 0x00	; 0
    7860:	27 e9       	ldi	r18, 0x97	; 151
    7862:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    7864:	31 83       	std	Z+1, r19	; 0x01
    7866:	20 83       	st	Z, r18
	return Size;
}
    7868:	08 95       	ret
			if (!(DescriptorNumber))
    786a:	88 23       	and	r24, r24
    786c:	71 f0       	breq	.+28     	; 0x788a <CALLBACK_USB_GetDescriptor+0x46>
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    786e:	81 30       	cpi	r24, 0x01	; 1
    7870:	89 f0       	breq	.+34     	; 0x7894 <CALLBACK_USB_GetDescriptor+0x50>
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7872:	82 30       	cpi	r24, 0x02	; 2
    7874:	a1 f4       	brne	.+40     	; 0x789e <CALLBACK_USB_GetDescriptor+0x5a>
				Size	= ManufNameString.Header.Size;
    7876:	8a e2       	ldi	r24, 0x2A	; 42
    7878:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufNameString;
    787a:	29 e0       	ldi	r18, 0x09	; 9
    787c:	31 e0       	ldi	r19, 0x01	; 1
    787e:	f2 cf       	rjmp	.-28     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x20>
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7880:	8e e3       	ldi	r24, 0x3E	; 62
    7882:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
    7884:	29 e5       	ldi	r18, 0x59	; 89
    7886:	31 e0       	ldi	r19, 0x01	; 1
    7888:	ed cf       	rjmp	.-38     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x20>
				Size    = LanguageString.Header.Size;
    788a:	84 e0       	ldi	r24, 0x04	; 4
    788c:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
    788e:	25 e5       	ldi	r18, 0x55	; 85
    7890:	31 e0       	ldi	r19, 0x01	; 1
    7892:	e8 cf       	rjmp	.-48     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x20>
				Size    = ProductString.Header.Size;
    7894:	8e e1       	ldi	r24, 0x1E	; 30
    7896:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ProductString;
    7898:	25 e3       	ldi	r18, 0x35	; 53
    789a:	31 e0       	ldi	r19, 0x01	; 1
    789c:	e3 cf       	rjmp	.-58     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x20>
	uint16_t    Size    = NO_DESCRIPTOR;
    789e:	90 e0       	ldi	r25, 0x00	; 0
    78a0:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
    78a2:	30 e0       	ldi	r19, 0x00	; 0
    78a4:	20 e0       	ldi	r18, 0x00	; 0
    78a6:	de cf       	rjmp	.-68     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x20>

000078a8 <Endpoint_ConfigureEndpoint_Prv>:
					UENUM = EndpointNumber;
    78a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << EPEN);
    78ac:	eb ee       	ldi	r30, 0xEB	; 235
    78ae:	f0 e0       	ldi	r31, 0x00	; 0
    78b0:	80 81       	ld	r24, Z
    78b2:	81 60       	ori	r24, 0x01	; 1
    78b4:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    78b6:	ed ee       	ldi	r30, 0xED	; 237
    78b8:	f0 e0       	ldi	r31, 0x00	; 0
    78ba:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    78bc:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	UECFG1X = UECFG1XData;
    78c0:	40 83       	st	Z, r20
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    78c2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    78c6:	88 1f       	adc	r24, r24
    78c8:	88 27       	eor	r24, r24
    78ca:	88 1f       	adc	r24, r24
    78cc:	08 95       	ret

000078ce <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78ce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_ControlRequest>
    78d2:	87 ff       	sbrs	r24, 7
    78d4:	11 c0       	rjmp	.+34     	; 0x78f8 <Endpoint_ClearStatusStage+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    78da:	82 ff       	sbrs	r24, 2
    78dc:	06 c0       	rjmp	.+12     	; 0x78ea <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78e2:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    78e8:	03 c0       	rjmp	.+6      	; 0x78f0 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78ea:	8e b3       	in	r24, 0x1e	; 30
    78ec:	81 11       	cpse	r24, r1
    78ee:	f3 cf       	rjmp	.-26     	; 0x78d6 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    78f0:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78f2:	8e b3       	in	r24, 0x1e	; 30
    78f4:	88 23       	and	r24, r24
    78f6:	e1 f3       	breq	.-8      	; 0x78f0 <Endpoint_ClearStatusStage+0x22>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    78fc:	80 ff       	sbrs	r24, 0
    78fe:	f9 cf       	rjmp	.-14     	; 0x78f2 <Endpoint_ClearStatusStage+0x24>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7900:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7904:	8e 77       	andi	r24, 0x7E	; 126
    7906:	ee cf       	rjmp	.-36     	; 0x78e4 <Endpoint_ClearStatusStage+0x16>

00007908 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    7908:	0f 93       	push	r16
    790a:	1f 93       	push	r17
    790c:	cf 93       	push	r28
    790e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7910:	41 d0       	rcall	.+130    	; 0x7994 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7912:	48 d0       	rcall	.+144    	; 0x79a4 <USB_INT_ClearAllInterrupts>
    7914:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7916:	d0 e0       	ldi	r29, 0x00	; 0
    7918:	88 81       	ld	r24, Y
    791a:	8f 77       	andi	r24, 0x7F	; 127
    791c:	88 83       	st	Y, r24
    791e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    7920:	80 68       	ori	r24, 0x80	; 128
    7922:	88 83       	st	Y, r24
    7924:	88 81       	ld	r24, Y
				USBCON  &= ~(1 << FRZCLK);
    7926:	8f 7d       	andi	r24, 0xDF	; 223
    7928:	88 83       	st	Y, r24
    792a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
    792c:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    792e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    7932:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7934:	10 e0       	ldi	r17, 0x00	; 0
    7936:	f8 01       	movw	r30, r16
    7938:	80 81       	ld	r24, Z
    793a:	8b 7f       	andi	r24, 0xFB	; 251
    793c:	80 83       	st	Z, r24
    793e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7940:	81 60       	ori	r24, 0x01	; 1
    7942:	88 83       	st	Y, r24
    7944:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7946:	60 e0       	ldi	r22, 0x00	; 0
    7948:	80 e0       	ldi	r24, 0x00	; 0
    794a:	ae df       	rcall	.-164    	; 0x78a8 <Endpoint_ConfigureEndpoint_Prv>
    794c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    794e:	f0 e0       	ldi	r31, 0x00	; 0
    7950:	80 81       	ld	r24, Z
    7952:	8e 7f       	andi	r24, 0xFE	; 254
    7954:	80 83       	st	Z, r24
    7956:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
    7958:	f0 e0       	ldi	r31, 0x00	; 0
    795a:	80 81       	ld	r24, Z
    795c:	81 60       	ori	r24, 0x01	; 1
    795e:	80 83       	st	Z, r24
    7960:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
    7962:	88 60       	ori	r24, 0x08	; 8
    7964:	80 83       	st	Z, r24
    7966:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
    7968:	80 81       	ld	r24, Z
    796a:	8e 7f       	andi	r24, 0xFE	; 254
    796c:	80 83       	st	Z, r24
    796e:	88 81       	ld	r24, Y
				USBCON  |=  (1 << OTGPADE);
    7970:	80 61       	ori	r24, 0x10	; 16
    7972:	88 83       	st	Y, r24
    7974:	df 91       	pop	r29
}
    7976:	cf 91       	pop	r28
    7978:	1f 91       	pop	r17
    797a:	0f 91       	pop	r16
    797c:	08 95       	ret

0000797e <USB_Init>:
    797e:	e7 ed       	ldi	r30, 0xD7	; 215
				UHWCON  |=  (1 << UVREGE);
    7980:	f0 e0       	ldi	r31, 0x00	; 0
    7982:	80 81       	ld	r24, Z
    7984:	81 60       	ori	r24, 0x01	; 1
    7986:	80 83       	st	Z, r24
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7988:	8a e4       	ldi	r24, 0x4A	; 74
    798a:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    798c:	81 e0       	ldi	r24, 0x01	; 1
    798e:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <USB_IsInitialized>
	USB_ResetInterface();
    7992:	ba cf       	rjmp	.-140    	; 0x7908 <USB_ResetInterface>

00007994 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7994:	e8 ed       	ldi	r30, 0xD8	; 216
    7996:	f0 e0       	ldi	r31, 0x00	; 0
    7998:	80 81       	ld	r24, Z
    799a:	8e 7f       	andi	r24, 0xFE	; 254
    799c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    799e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    79a2:	08 95       	ret

000079a4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    79a4:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    79a8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    79ac:	08 95       	ret

000079ae <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79ae:	1f 92       	push	r1
    79b0:	0f 92       	push	r0
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	0f 92       	push	r0
    79b6:	11 24       	eor	r1, r1
    79b8:	2f 93       	push	r18
    79ba:	3f 93       	push	r19
    79bc:	4f 93       	push	r20
    79be:	5f 93       	push	r21
    79c0:	6f 93       	push	r22
    79c2:	7f 93       	push	r23
    79c4:	8f 93       	push	r24
    79c6:	9f 93       	push	r25
    79c8:	af 93       	push	r26
    79ca:	bf 93       	push	r27
    79cc:	ef 93       	push	r30
    79ce:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79d0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79d4:	80 ff       	sbrs	r24, 0
    79d6:	16 c0       	rjmp	.+44     	; 0x7a04 <__vector_10+0x56>
						return (USBCON & (1 << VBUSTE));
    79d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79dc:	80 ff       	sbrs	r24, 0
    79de:	12 c0       	rjmp	.+36     	; 0x7a04 <__vector_10+0x56>
						USBINT &= ~(1 << VBUSTI);
    79e0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    79e4:	8e 7f       	andi	r24, 0xFE	; 254
    79e6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    79ea:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    79ee:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    79f0:	80 ff       	sbrs	r24, 0
    79f2:	4b c0       	rjmp	.+150    	; 0x7a8a <__vector_10+0xdc>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79f4:	82 e0       	ldi	r24, 0x02	; 2
    79f6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    79f8:	09 b4       	in	r0, 0x29	; 41
    79fa:	00 fe       	sbrs	r0, 0
    79fc:	fd cf       	rjmp	.-6      	; 0x79f8 <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    79fe:	81 e0       	ldi	r24, 0x01	; 1
    7a00:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7a02:	fe d1       	rcall	.+1020   	; 0x7e00 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a08:	80 ff       	sbrs	r24, 0
    7a0a:	17 c0       	rjmp	.+46     	; 0x7a3a <__vector_10+0x8c>
						return (UDIEN  & (1 << SUSPE));
    7a0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a10:	80 ff       	sbrs	r24, 0
    7a12:	13 c0       	rjmp	.+38     	; 0x7a3a <__vector_10+0x8c>
						UDIEN  &= ~(1 << SUSPE);
    7a14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a18:	8e 7f       	andi	r24, 0xFE	; 254
    7a1a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    7a1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a22:	80 61       	ori	r24, 0x10	; 16
    7a24:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a2c:	80 62       	ori	r24, 0x20	; 32
    7a2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    7a32:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a34:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7a36:	8e bb       	out	0x1e, r24	; 30
    7a38:	e3 d1       	rcall	.+966    	; 0x7e00 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    7a3a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a3e:	84 ff       	sbrs	r24, 4
    7a40:	2e c0       	rjmp	.+92     	; 0x7a9e <__vector_10+0xf0>
						return (UDIEN  & (1 << WAKEUPE));
    7a42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a46:	84 ff       	sbrs	r24, 4
    7a48:	2a c0       	rjmp	.+84     	; 0x7a9e <__vector_10+0xf0>
				PLLCSR = USB_PLL_PSC;
    7a4a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a4c:	82 e0       	ldi	r24, 0x02	; 2
    7a4e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a50:	09 b4       	in	r0, 0x29	; 41
    7a52:	00 fe       	sbrs	r0, 0
    7a54:	fd cf       	rjmp	.-6      	; 0x7a50 <__vector_10+0xa2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a5a:	8f 7d       	andi	r24, 0xDF	; 223
    7a5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    7a60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a64:	8f 7e       	andi	r24, 0xEF	; 239
    7a66:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    7a6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a6e:	8f 7e       	andi	r24, 0xEF	; 239
    7a70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    7a74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a78:	81 60       	ori	r24, 0x01	; 1
    7a7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a7e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <USB_Device_ConfigurationNumber>
    7a82:	88 23       	and	r24, r24
    7a84:	29 f0       	breq	.+10     	; 0x7a90 <__vector_10+0xe2>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a86:	84 e0       	ldi	r24, 0x04	; 4
			USB_DeviceState = DEVICE_STATE_Unattached;
    7a88:	08 c0       	rjmp	.+16     	; 0x7a9a <__vector_10+0xec>
			EVENT_USB_Device_Disconnect();
    7a8a:	1e ba       	out	0x1e, r1	; 30
    7a8c:	b9 d1       	rcall	.+882    	; 0x7e00 <USB_Event_Stub>
    7a8e:	ba cf       	rjmp	.-140    	; 0x7a04 <__vector_10+0x56>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a90:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a94:	87 fd       	sbrc	r24, 7
    7a96:	f7 cf       	rjmp	.-18     	; 0x7a86 <__vector_10+0xd8>
    7a98:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a9a:	8e bb       	out	0x1e, r24	; 30
    7a9c:	b1 d1       	rcall	.+866    	; 0x7e00 <USB_Event_Stub>
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7aa2:	83 ff       	sbrs	r24, 3
    7aa4:	21 c0       	rjmp	.+66     	; 0x7ae8 <__vector_10+0x13a>
						return (UDIEN  & (1 << EORSTE));
    7aa6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7aaa:	83 ff       	sbrs	r24, 3
    7aac:	1d c0       	rjmp	.+58     	; 0x7ae8 <__vector_10+0x13a>
						UDINT  &= ~(1 << EORSTI);
    7aae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ab2:	87 7f       	andi	r24, 0xF7	; 247
    7ab4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7ab8:	82 e0       	ldi	r24, 0x02	; 2
    7aba:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7abc:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    7ac0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ac4:	8e 7f       	andi	r24, 0xFE	; 254
    7ac6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    7aca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7ace:	8e 7f       	andi	r24, 0xFE	; 254
    7ad0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    7ad4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7ad8:	80 61       	ori	r24, 0x10	; 16
    7ada:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7ade:	42 e0       	ldi	r20, 0x02	; 2
    7ae0:	60 e0       	ldi	r22, 0x00	; 0
    7ae2:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7ae4:	e1 de       	rcall	.-574    	; 0x78a8 <Endpoint_ConfigureEndpoint_Prv>
    7ae6:	8c d1       	rcall	.+792    	; 0x7e00 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7ae8:	ff 91       	pop	r31
    7aea:	ef 91       	pop	r30
    7aec:	bf 91       	pop	r27
    7aee:	af 91       	pop	r26
    7af0:	9f 91       	pop	r25
    7af2:	8f 91       	pop	r24
    7af4:	7f 91       	pop	r23
    7af6:	6f 91       	pop	r22
    7af8:	5f 91       	pop	r21
    7afa:	4f 91       	pop	r20
    7afc:	3f 91       	pop	r19
    7afe:	2f 91       	pop	r18
    7b00:	0f 90       	pop	r0
    7b02:	0f be       	out	0x3f, r0	; 63
    7b04:	0f 90       	pop	r0
    7b06:	1f 90       	pop	r1
    7b08:	18 95       	reti

00007b0a <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    7b0a:	fc 01       	movw	r30, r24
    7b0c:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7b0e:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <USB_ControlRequest+0x6>
    7b12:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <USB_ControlRequest+0x7>
    7b16:	26 17       	cp	r18, r22
    7b18:	37 07       	cpc	r19, r23
    7b1a:	90 f0       	brcs	.+36     	; 0x7b40 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7b1c:	00 97       	sbiw	r24, 0x00	; 0
    7b1e:	29 f4       	brne	.+10     	; 0x7b2a <Endpoint_Write_Control_Stream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b20:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b24:	2e 77       	andi	r18, 0x7E	; 126
    7b26:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b2a:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7b2c:	00 97       	sbiw	r24, 0x00	; 0
    7b2e:	51 f4       	brne	.+20     	; 0x7b44 <Endpoint_Write_Control_Stream_LE+0x3a>
    7b30:	41 11       	cpse	r20, r1
    7b32:	08 c0       	rjmp	.+16     	; 0x7b44 <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7b38:	82 ff       	sbrs	r24, 2
    7b3a:	30 c0       	rjmp	.+96     	; 0x7b9c <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7b3c:	80 e0       	ldi	r24, 0x00	; 0
    7b3e:	08 95       	ret
    7b40:	c9 01       	movw	r24, r18
    7b42:	f3 cf       	rjmp	.-26     	; 0x7b2a <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b44:	2e b3       	in	r18, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b46:	22 23       	and	r18, r18
    7b48:	91 f1       	breq	.+100    	; 0x7bae <Endpoint_Write_Control_Stream_LE+0xa4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b4a:	25 30       	cpi	r18, 0x05	; 5
    7b4c:	61 f1       	breq	.+88     	; 0x7ba6 <Endpoint_Write_Control_Stream_LE+0x9c>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b4e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    7b52:	23 fd       	sbrc	r18, 3
    7b54:	2a c0       	rjmp	.+84     	; 0x7baa <Endpoint_Write_Control_Stream_LE+0xa0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b56:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    7b5a:	22 fd       	sbrc	r18, 2
    7b5c:	eb cf       	rjmp	.-42     	; 0x7b34 <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b5e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    7b62:	20 ff       	sbrs	r18, 0
    7b64:	e3 cf       	rjmp	.-58     	; 0x7b2c <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b66:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b6a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7b6e:	00 97       	sbiw	r24, 0x00	; 0
    7b70:	19 f0       	breq	.+6      	; 0x7b78 <Endpoint_Write_Control_Stream_LE+0x6e>
    7b72:	28 30       	cpi	r18, 0x08	; 8
    7b74:	31 05       	cpc	r19, r1
    7b76:	58 f0       	brcs	.+22     	; 0x7b8e <Endpoint_Write_Control_Stream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7b78:	41 e0       	ldi	r20, 0x01	; 1
    7b7a:	28 30       	cpi	r18, 0x08	; 8
    7b7c:	31 05       	cpc	r19, r1
    7b7e:	09 f0       	breq	.+2      	; 0x7b82 <Endpoint_Write_Control_Stream_LE+0x78>
    7b80:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b82:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b86:	2e 77       	andi	r18, 0x7E	; 126
    7b88:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
    7b8c:	cf cf       	rjmp	.-98     	; 0x7b2c <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7b8e:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b90:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    7b94:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    7b96:	2f 5f       	subi	r18, 0xFF	; 255
    7b98:	3f 4f       	sbci	r19, 0xFF	; 255
    7b9a:	e9 cf       	rjmp	.-46     	; 0x7b6e <Endpoint_Write_Control_Stream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b9c:	8e b3       	in	r24, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b9e:	88 23       	and	r24, r24
    7ba0:	31 f0       	breq	.+12     	; 0x7bae <Endpoint_Write_Control_Stream_LE+0xa4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7ba2:	85 30       	cpi	r24, 0x05	; 5
    7ba4:	39 f6       	brne	.-114    	; 0x7b34 <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7ba6:	83 e0       	ldi	r24, 0x03	; 3
}
    7ba8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7baa:	81 e0       	ldi	r24, 0x01	; 1
    7bac:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7bae:	82 e0       	ldi	r24, 0x02	; 2
    7bb0:	08 95       	ret

00007bb2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7bb2:	fc 01       	movw	r30, r24
    7bb4:	cb 01       	movw	r24, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7bb6:	00 97       	sbiw	r24, 0x00	; 0
    7bb8:	29 f4       	brne	.+10     	; 0x7bc4 <Endpoint_Read_Control_Stream_LE+0x12>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7bbe:	2b 77       	andi	r18, 0x7B	; 123
    7bc0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	while (Length)
    7bc4:	00 97       	sbiw	r24, 0x00	; 0
    7bc6:	31 f4       	brne	.+12     	; 0x7bd4 <Endpoint_Read_Control_Stream_LE+0x22>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7bc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7bcc:	80 ff       	sbrs	r24, 0
    7bce:	1b c0       	rjmp	.+54     	; 0x7c06 <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7bd0:	80 e0       	ldi	r24, 0x00	; 0
    7bd2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bd4:	2e b3       	in	r18, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bd6:	22 23       	and	r18, r18
    7bd8:	f9 f0       	breq	.+62     	; 0x7c18 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bda:	25 30       	cpi	r18, 0x05	; 5
    7bdc:	c9 f0       	breq	.+50     	; 0x7c10 <Endpoint_Read_Control_Stream_LE+0x5e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bde:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    7be2:	23 fd       	sbrc	r18, 3
    7be4:	17 c0       	rjmp	.+46     	; 0x7c14 <Endpoint_Read_Control_Stream_LE+0x62>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7be6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsOUTReceived())
    7bea:	22 ff       	sbrs	r18, 2
    7bec:	eb cf       	rjmp	.-42     	; 0x7bc4 <Endpoint_Read_Control_Stream_LE+0x12>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7bee:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7bf2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && Endpoint_BytesInEndpoint())
    7bf6:	23 2b       	or	r18, r19
    7bf8:	01 f3       	breq	.-64     	; 0x7bba <Endpoint_Read_Control_Stream_LE+0x8>
				return UEDATX;
    7bfa:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7bfe:	21 93       	st	Z+, r18
				Length--;
    7c00:	01 97       	sbiw	r24, 0x01	; 1
			while (Length && Endpoint_BytesInEndpoint())
    7c02:	a9 f7       	brne	.-22     	; 0x7bee <Endpoint_Read_Control_Stream_LE+0x3c>
    7c04:	da cf       	rjmp	.-76     	; 0x7bba <Endpoint_Read_Control_Stream_LE+0x8>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c06:	8e b3       	in	r24, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c08:	88 23       	and	r24, r24
    7c0a:	31 f0       	breq	.+12     	; 0x7c18 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c0c:	85 30       	cpi	r24, 0x05	; 5
    7c0e:	e1 f6       	brne	.-72     	; 0x7bc8 <Endpoint_Read_Control_Stream_LE+0x16>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c10:	83 e0       	ldi	r24, 0x03	; 3
}
    7c12:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c14:	81 e0       	ldi	r24, 0x01	; 1
    7c16:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c18:	82 e0       	ldi	r24, 0x02	; 2
    7c1a:	08 95       	ret

00007c1c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c1c:	0f 93       	push	r16
    7c1e:	1f 93       	push	r17
    7c20:	cf 93       	push	r28
    7c22:	df 93       	push	r29
    7c24:	00 d0       	rcall	.+0      	; 0x7c26 <USB_Device_ProcessControlRequest+0xa>
    7c26:	cd b7       	in	r28, 0x3d	; 61
    7c28:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7c2a:	83 ec       	ldi	r24, 0xC3	; 195
    7c2c:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c2e:	fc 01       	movw	r30, r24
    7c30:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    7c32:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7c36:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c38:	21 e0       	ldi	r18, 0x01	; 1
    7c3a:	8b 3c       	cpi	r24, 0xCB	; 203
    7c3c:	92 07       	cpc	r25, r18
    7c3e:	b9 f7       	brne	.-18     	; 0x7c2e <USB_Device_ProcessControlRequest+0x12>
	#endif

	EVENT_USB_Device_ControlRequest();
    7c40:	ea da       	rcall	.-2604   	; 0x7216 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    7c46:	83 ff       	sbrs	r24, 3
    7c48:	29 c0       	rjmp	.+82     	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c4a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c4e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x1>
    7c52:	9a 30       	cpi	r25, 0x0A	; 10
    7c54:	18 f5       	brcc	.+70     	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
    7c56:	e9 2f       	mov	r30, r25
    7c58:	f0 e0       	ldi	r31, 0x00	; 0
    7c5a:	e0 5d       	subi	r30, 0xD0	; 208
    7c5c:	f0 4c       	sbci	r31, 0xC0	; 192
    7c5e:	e2 c0       	rjmp	.+452    	; 0x7e24 <__tablejump2__>

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    7c60:	82 38       	cpi	r24, 0x82	; 130
    7c62:	e1 f4       	brne	.+56     	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c64:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x4>
    7c68:	87 70       	andi	r24, 0x07	; 7
					UENUM = EndpointNumber;
    7c6a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c6e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c72:	85 fb       	bst	r24, 5
    7c74:	88 27       	eor	r24, r24
    7c76:	80 f9       	bld	r24, 0
					UENUM = EndpointNumber;
    7c78:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    7c7c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c80:	97 7f       	andi	r25, 0xF7	; 247
    7c82:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c86:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    7c8a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c92:	8e 77       	andi	r24, 0x7E	; 126
    7c94:	b1 c0       	rjmp	.+354    	; 0x7df8 <USB_Device_ProcessControlRequest+0x1dc>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c96:	82 30       	cpi	r24, 0x02	; 2
    7c98:	09 f4       	brne	.+2      	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
    7c9a:	92 c0       	rjmp	.+292    	; 0x7dc0 <USB_Device_ProcessControlRequest+0x1a4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    7ca0:	83 ff       	sbrs	r24, 3
    7ca2:	0a c0       	rjmp	.+20     	; 0x7cb8 <USB_Device_ProcessControlRequest+0x9c>
				UECONX |= (1 << STALLRQ);
    7ca4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7ca8:	80 62       	ori	r24, 0x20	; 32
    7caa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UEINTX &= ~(1 << RXSTPI);
    7cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cb2:	87 7f       	andi	r24, 0xF7	; 247
    7cb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    7cb8:	0f 90       	pop	r0
    7cba:	0f 90       	pop	r0
    7cbc:	df 91       	pop	r29
    7cbe:	cf 91       	pop	r28
    7cc0:	1f 91       	pop	r17
    7cc2:	0f 91       	pop	r16
    7cc4:	08 95       	ret
				UECONX |= (1 << STALLRQC);
    7cc6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7cca:	90 61       	ori	r25, 0x10	; 16
    7ccc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << EndpointNumber);
    7cd0:	21 e0       	ldi	r18, 0x01	; 1
    7cd2:	30 e0       	ldi	r19, 0x00	; 0
    7cd4:	01 c0       	rjmp	.+2      	; 0x7cd8 <USB_Device_ProcessControlRequest+0xbc>
    7cd6:	22 0f       	add	r18, r18
    7cd8:	8a 95       	dec	r24
    7cda:	ea f7       	brpl	.-6      	; 0x7cd6 <USB_Device_ProcessControlRequest+0xba>
    7cdc:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    7ce0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    7ce4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7ce8:	88 60       	ori	r24, 0x08	; 8
    7cea:	7f c0       	rjmp	.+254    	; 0x7dea <USB_Device_ProcessControlRequest+0x1ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7cec:	81 11       	cpse	r24, r1
    7cee:	d6 cf       	rjmp	.-84     	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7cf0:	10 91 c5 01 	lds	r17, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x2>
    7cf4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7cf6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7cf8:	f8 94       	cli
				UEINTX &= ~(1 << RXSTPI);
    7cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cfe:	87 7f       	andi	r24, 0xF7	; 247
    7d00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    7d04:	e4 dd       	rcall	.-1080   	; 0x78ce <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    7d0a:	80 ff       	sbrs	r24, 0
    7d0c:	fc cf       	rjmp	.-8      	; 0x7d06 <USB_Device_ProcessControlRequest+0xea>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d0e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7d12:	80 78       	andi	r24, 0x80	; 128
    7d14:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7d16:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    7d1a:	80 68       	ori	r24, 0x80	; 128
    7d1c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d20:	82 e0       	ldi	r24, 0x02	; 2
    7d22:	11 11       	cpse	r17, r1
    7d24:	83 e0       	ldi	r24, 0x03	; 3
    7d26:	8e bb       	out	0x1e, r24	; 30
				SREG = GlobalIntState;
    7d28:	0f bf       	out	0x3f, r16	; 63
}
    7d2a:	b8 cf       	rjmp	.-144    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d2c:	80 58       	subi	r24, 0x80	; 128
    7d2e:	82 30       	cpi	r24, 0x02	; 2
    7d30:	08 f0       	brcs	.+2      	; 0x7d34 <USB_Device_ProcessControlRequest+0x118>
    7d32:	b4 cf       	rjmp	.-152    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d34:	ae 01       	movw	r20, r28
    7d36:	4f 5f       	subi	r20, 0xFF	; 255
    7d38:	5f 4f       	sbci	r21, 0xFF	; 255
    7d3a:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x4>
    7d3e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x2>
    7d42:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x3>
    7d46:	7e dd       	rcall	.-1284   	; 0x7844 <CALLBACK_USB_GetDescriptor>
    7d48:	bc 01       	movw	r22, r24
    7d4a:	89 2b       	or	r24, r25
    7d4c:	09 f4       	brne	.+2      	; 0x7d50 <USB_Device_ProcessControlRequest+0x134>
    7d4e:	a6 cf       	rjmp	.-180    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d54:	87 7f       	andi	r24, 0xF7	; 247
    7d56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7d5a:	89 81       	ldd	r24, Y+1	; 0x01
    7d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d5e:	d5 de       	rcall	.-598    	; 0x7b0a <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d64:	8b 77       	andi	r24, 0x7B	; 123
    7d66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d6a:	98 cf       	rjmp	.-208    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7d6c:	80 38       	cpi	r24, 0x80	; 128
    7d6e:	09 f0       	breq	.+2      	; 0x7d72 <USB_Device_ProcessControlRequest+0x156>
    7d70:	95 cf       	rjmp	.-214    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d76:	87 7f       	andi	r24, 0xF7	; 247
    7d78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7d7c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    7d80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d84:	84 cf       	rjmp	.-248    	; 0x7c8e <USB_Device_ProcessControlRequest+0x72>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d86:	81 11       	cpse	r24, r1
    7d88:	89 cf       	rjmp	.-238    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7d8a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x2>
    7d8e:	92 30       	cpi	r25, 0x02	; 2
    7d90:	08 f0       	brcs	.+2      	; 0x7d94 <USB_Device_ProcessControlRequest+0x178>
    7d92:	84 cf       	rjmp	.-248    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d98:	87 7f       	andi	r24, 0xF7	; 247
    7d9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7d9e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    7da2:	95 dd       	rcall	.-1238   	; 0x78ce <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    7da4:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <USB_Device_ConfigurationNumber>
    7da8:	88 23       	and	r24, r24
    7daa:	11 f0       	breq	.+4      	; 0x7db0 <USB_Device_ProcessControlRequest+0x194>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7dac:	84 e0       	ldi	r24, 0x04	; 4
    7dae:	05 c0       	rjmp	.+10     	; 0x7dba <USB_Device_ProcessControlRequest+0x19e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7db0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7db4:	87 fd       	sbrc	r24, 7
    7db6:	fa cf       	rjmp	.-12     	; 0x7dac <USB_Device_ProcessControlRequest+0x190>
    7db8:	81 e0       	ldi	r24, 0x01	; 1
	EVENT_USB_Device_ConfigurationChanged();
    7dba:	8e bb       	out	0x1e, r24	; 30
    7dbc:	20 da       	rcall	.-3008   	; 0x71fe <EVENT_USB_Device_ConfigurationChanged>
    7dbe:	6e cf       	rjmp	.-292    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7dc0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x2>
    7dc4:	81 11       	cpse	r24, r1
    7dc6:	13 c0       	rjmp	.+38     	; 0x7dee <USB_Device_ProcessControlRequest+0x1d2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7dc8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x4>
    7dcc:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7dce:	09 f4       	brne	.+2      	; 0x7dd2 <USB_Device_ProcessControlRequest+0x1b6>
    7dd0:	65 cf       	rjmp	.-310    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>
					UENUM = EndpointNumber;
    7dd2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    7dd6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7dda:	20 ff       	sbrs	r18, 0
    7ddc:	08 c0       	rjmp	.+16     	; 0x7dee <USB_Device_ProcessControlRequest+0x1d2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7dde:	93 30       	cpi	r25, 0x03	; 3
    7de0:	09 f0       	breq	.+2      	; 0x7de4 <USB_Device_ProcessControlRequest+0x1c8>
    7de2:	71 cf       	rjmp	.-286    	; 0x7cc6 <USB_Device_ProcessControlRequest+0xaa>
				UECONX |= (1 << STALLRQ);
    7de4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7de8:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    7dea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = EndpointNumber;
    7dee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    7df2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7df6:	87 7f       	andi	r24, 0xF7	; 247
    7df8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    7dfc:	68 dd       	rcall	.-1328   	; 0x78ce <Endpoint_ClearStatusStage>
}
    7dfe:	4e cf       	rjmp	.-356    	; 0x7c9c <USB_Device_ProcessControlRequest+0x80>

00007e00 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7e00:	08 95       	ret

00007e02 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e02:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e04:	8e b3       	in	r24, 0x1e	; 30
    7e06:	88 23       	and	r24, r24
    7e08:	59 f0       	breq	.+22     	; 0x7e20 <USB_USBTask+0x1e>
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e0a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7e0e:	c7 70       	andi	r28, 0x07	; 7
					UENUM = EndpointNumber;
    7e10:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7e18:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7e1a:	00 df       	rcall	.-512    	; 0x7c1c <USB_Device_ProcessControlRequest>
					UENUM = EndpointNumber;
    7e1c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    7e20:	cf 91       	pop	r28
    7e22:	08 95       	ret

00007e24 <__tablejump2__>:
    7e24:	ee 0f       	add	r30, r30
    7e26:	ff 1f       	adc	r31, r31
    7e28:	05 90       	lpm	r0, Z+
    7e2a:	f4 91       	lpm	r31, Z
    7e2c:	e0 2d       	mov	r30, r0
    7e2e:	09 94       	ijmp

00007e30 <eeprom_read_byte>:
    7e30:	f9 99       	sbic	0x1f, 1	; 31
    7e32:	fe cf       	rjmp	.-4      	; 0x7e30 <eeprom_read_byte>
    7e34:	92 bd       	out	0x22, r25	; 34
    7e36:	81 bd       	out	0x21, r24	; 33
    7e38:	f8 9a       	sbi	0x1f, 0	; 31
    7e3a:	99 27       	eor	r25, r25
    7e3c:	80 b5       	in	r24, 0x20	; 32
    7e3e:	08 95       	ret

00007e40 <eeprom_write_byte>:
    7e40:	26 2f       	mov	r18, r22

00007e42 <eeprom_write_r18>:
    7e42:	f9 99       	sbic	0x1f, 1	; 31
    7e44:	fe cf       	rjmp	.-4      	; 0x7e42 <eeprom_write_r18>
    7e46:	1f ba       	out	0x1f, r1	; 31
    7e48:	92 bd       	out	0x22, r25	; 34
    7e4a:	81 bd       	out	0x21, r24	; 33
    7e4c:	20 bd       	out	0x20, r18	; 32
    7e4e:	0f b6       	in	r0, 0x3f	; 63
    7e50:	f8 94       	cli
    7e52:	fa 9a       	sbi	0x1f, 2	; 31
    7e54:	f9 9a       	sbi	0x1f, 1	; 31
    7e56:	0f be       	out	0x3f, r0	; 63
    7e58:	01 96       	adiw	r24, 0x01	; 1
    7e5a:	08 95       	ret

00007e5c <_exit>:
    7e5c:	f8 94       	cli

00007e5e <__stop_program>:
    7e5e:	ff cf       	rjmp	.-2      	; 0x7e5e <__stop_program>
    7e60:	30 3e       	cpi	r19, 0xE0	; 224
    7e62:	4b 3e       	cpi	r20, 0xEB	; 235
    7e64:	4e 3e       	cpi	r20, 0xEE	; 238
    7e66:	4b 3e       	cpi	r20, 0xEB	; 235
    7e68:	4e 3e       	cpi	r20, 0xEE	; 238
    7e6a:	76 3e       	cpi	r23, 0xE6	; 230
    7e6c:	96 3e       	cpi	r25, 0xE6	; 230
    7e6e:	4e 3e       	cpi	r20, 0xEE	; 238
    7e70:	b6 3e       	cpi	r27, 0xE6	; 230
    7e72:	c3 3e       	cpi	r28, 0xE3	; 227
